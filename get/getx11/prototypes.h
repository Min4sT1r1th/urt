extern void init_img_info(image_information *i);
extern void main(int argc, char **argv);
extern void handle_exposure(register image_information *img, int x, int y, int width, int height, int img_h);
extern image_information *action_flip_forward(image_information *img, image_information *img_info, int flip_book_udelay, int n, unsigned long mask, XEvent *event, Boolean *found_event);
extern image_information *action_flip_backward(image_information *img, image_information *img_info, int flip_book_udelay, int n, unsigned long mask, XEvent *event, Boolean *found_event);
extern image_information *action_flip_book_cycle(image_information *img, image_information *img_info, int n, Boolean flip_forward, int flip_book_udelay);
extern int resize_window(image_information *img, int new_w, int new_h);
extern void set_watch_cursor(Window window);
extern void set_circle_cursor(Window window);
extern void set_left_ptr_cursor(Window window);
extern void get_cursors(Window window);
extern XImage *get_X_image(image_information *img, int width, int height, Boolean share);
extern void destroy_X_image(image_information *img, XImage *image);
extern void check_pixmap_allocation(image_information *img);
extern int allocate_ximage(image_information *img, Boolean reallocate);
extern void allocate_pixmap(image_information *img, Boolean reallocate);
extern void free_X_pixmap(image_information *img, Pixmap pix);
extern void put_X_image(image_information *img, Drawable d, GC gc, XImage *image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height);
extern void determine_icon_size(int image_width, int image_height, int *icon_width, int *icon_height, int *icon_factor);
extern void get_x_colormap(image_information *img);
extern void open_x_display(char *display_name);
extern void calc_view_origin(image_information *img);
extern void create_windows(register image_information *img, char *window_geometry);
extern void init_color(register image_information *img);
extern void free_unique_colors(image_information *img, Pixel *pixels, int npixels);
extern void free_image_colors(image_information *img);
extern void find_appropriate_visual(register image_information *img);
extern void MapPixWindow(image_information *img, int use_top);
extern void DrawPixWindow(image_information *img, int x, int y);
extern void DrawSpeedWindow(image_information *img, int s);
extern void UnmapPixWindow(image_information *img);
extern void set_timer(unsigned n);
extern void wait_timer(void);
extern void choose_scanline_converter(image_information *img);
extern void map_rgb_to_bw(image_information *img, rle_pixel **rows, register rle_pixel *bw_row);
extern void map_rgb_to_rgb(image_information *img, rle_pixel **in_rows, rle_pixel **out_rows);
extern void get_dither_arrays(register image_information *img);
extern int shift_match_left(Pixel mask, int high_bit_index);
extern int shift_match_right(Pixel mask);
extern void check_mono_color(image_information *img, rle_hdr *img_hdr);
extern void get_dither_colors(register image_information *img, rle_hdr *img_hdr);
extern int eq_cmap(register rle_pixel **cm1, int len1, register rle_pixel **cm2, int len2);
extern int XCopyImage(XImage *image, int src_x, int src_y, int width, int height, int dst_x, int dst_y);
